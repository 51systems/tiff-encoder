var N = null;var searchIndex = {};
searchIndex["tiff_encoder"]={"doc":"A crate for encoding TIFF files.","items":[[3,"EndianFile","tiff_encoder","A helper structure that provides convenience methods to write to a `fs::File`, being aware of the file's [`Endianness`].",N,N],[3,"TiffFile","","Representation of a Tagged Image File.",N,N],[3,"IfdChain","","An ordered list of [`Ifd`]s, each pointing to the next one.",N,N],[3,"Ifd","","A structure that holds both an IFD and all the values pointed at by its entries.",N,N],[3,"OffsetsToIfds","","A list of [`IFD`] values, each pointing to a specific  [`Ifd`].",N,N],[12,"data","","",0,N],[3,"Offsets","","A list of [`LONG`] values, each pointing to a specific  [`Datablock`].",N,N],[12,"data","","",1,N],[3,"ByteBlock","","[`Datablock`] that consists of a list of bytes.",N,N],[12,"0","","",2,N],[3,"TiffTypeValues","","A list of values of any given [`TiffType`].",N,N],[4,"Endianness","","The byte order used within the TIFF file.",N,N],[13,"II","","Intel byte order, also known as little-endian.",3,N],[13,"MM","","Motorola byte order, also known as big-endian.",3,N],[0,"tiff_type","","Representations of TIFF field data types.",N,N],[3,"BYTE","tiff_encoder::tiff_type","8-bit unsigned integer.",N,N],[12,"0","","",4,N],[3,"ASCII","","8-bit byte that contains a 7-bit ASCII code.",N,N],[3,"SHORT","","16-bit (2-byte) unsigned integer.",N,N],[12,"0","","",5,N],[3,"LONG","","32-bit (4-byte) unsigned integer.",N,N],[12,"0","","",6,N],[3,"RATIONAL","","Two LONGs representing, respectively, the numerator and the denominator of a fraction.",N,N],[12,"numerator","","",7,N],[12,"denominator","","",7,N],[3,"SBYTE","","8-bit signed (twos-complement) integer.",N,N],[12,"0","","",8,N],[3,"UNDEFINED","","8-bit byte that may contain anything, depending on the definition of the field.",N,N],[12,"0","","",9,N],[3,"SSHORT","","16-bit (2-byte) signed (twos-complement) integer.",N,N],[12,"0","","",10,N],[3,"SLONG","","32-bit (4-byte) signed (twos-complement) integer.",N,N],[12,"0","","",11,N],[3,"SRATIONAL","","Two SLONGs representing, respectively, the numerator and the denominator of a fraction.",N,N],[12,"numerator","","",12,N],[12,"denominator","","",12,N],[3,"FLOAT","","Single precision (4-byte) IEEE format.",N,N],[12,"0","","",13,N],[3,"DOUBLE","","Double precision (8-byte) IEEE format.",N,N],[12,"0","","",14,N],[3,"IFD","","32-bit (4-byte) unsigned integer used exclusively to point to IFDs.",N,N],[12,"0","","",15,N],[8,"TiffType","","A type of data for TIFF fields.",N,N],[10,"id","","The TIFF 16-bit code that identifies the type.",16,[[],["u16"]]],[10,"size","","The number of bytes occupied by a single value of this type.",16,[[],["u32"]]],[10,"write_to","","The function that writes this type to a given [`EndianFile`].",16,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `BYTE`s from a vector of bytes.",4,[[["vec",["u8"]]],["tifftypevalues",["byte"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `BYTE`.",4,[[["u8"]],["tifftypevalues",["byte"]]]],[11,"id","","",4,[[],["u16"]]],[11,"size","","",4,[[],["u32"]]],[11,"write_to","","",4,[[["self"],["endianfile"]],["result"]]],[11,"from_str","","Constructs a [`TiffTypeValues`] of `ASCII`s from a `&str`.",17,[[["str"]],["tifftypevalues",["ascii"]]]],[11,"values","","Constructs a [`TiffTypeValues`] of `ASCII`s from a vector of bytes.",17,[[["vec",["u8"]]],["tifftypevalues",["ascii"]]]],[11,"new","","Creates an `ASCII`s value from a byte.",17,[[["u8"]],["ascii"]]],[11,"id","","",17,[[],["u16"]]],[11,"size","","",17,[[],["u32"]]],[11,"write_to","","",17,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `SHORTS`s from a vector of `u16`.",5,[[["vec",["u16"]]],["tifftypevalues",["short"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `SHORT`.",5,[[["u16"]],["tifftypevalues",["short"]]]],[11,"id","","",5,[[],["u16"]]],[11,"size","","",5,[[],["u32"]]],[11,"write_to","","",5,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `LONG`s from a vector of `u32`.",6,[[["vec",["u32"]]],["tifftypevalues",["long"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `LONG`.",6,[[["u32"]],["tifftypevalues",["long"]]]],[11,"id","","",6,[[],["u16"]]],[11,"size","","",6,[[],["u32"]]],[11,"write_to","","",6,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `RATIONAL`s from a vector of pairs (numerator, denominator). Both must be `u32` values.",7,[[["vec"]],["tifftypevalues",["rational"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `RATIONAL` from a pair (numerator, denominator). Both values must be `u32`.",7,[[["u32"],["u32"]],["tifftypevalues",["rational"]]]],[11,"id","","",7,[[],["u16"]]],[11,"size","","",7,[[],["u32"]]],[11,"write_to","","",7,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `SBYTE`s from a vector of `i8`.",8,[[["vec",["i8"]]],["tifftypevalues",["sbyte"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `SBYTE`.",8,[[["i8"]],["tifftypevalues",["sbyte"]]]],[11,"id","","",8,[[],["u16"]]],[11,"size","","",8,[[],["u32"]]],[11,"write_to","","",8,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `UNDEFINED`s from a vector of bytes.",9,[[["vec",["u8"]]],["tifftypevalues",["undefined"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `UNDEFINED`.",9,[[["u8"]],["tifftypevalues",["undefined"]]]],[11,"id","","",9,[[],["u16"]]],[11,"size","","",9,[[],["u32"]]],[11,"write_to","","",9,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `SSHORT`s from a vector of `i16`.",10,[[["vec",["i16"]]],["tifftypevalues",["sshort"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `SSHORT`.",10,[[["i16"]],["tifftypevalues",["sshort"]]]],[11,"id","","",10,[[],["u16"]]],[11,"size","","",10,[[],["u32"]]],[11,"write_to","","",10,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `SLONG`s from a vector of `i32`.",11,[[["vec",["i32"]]],["tifftypevalues",["slong"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `SLONG`.",11,[[["i32"]],["tifftypevalues",["slong"]]]],[11,"id","","",11,[[],["u16"]]],[11,"size","","",11,[[],["u32"]]],[11,"write_to","","",11,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `SRATIONAL`s from a vector of pairs (numerator, denominator). Both must be `i32` values.",12,[[["vec"]],["tifftypevalues",["srational"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `SRATIONAL` from a pair (numerator, denominator). Both values must be `i32`.",12,[[["i32"],["i32"]],["tifftypevalues",["srational"]]]],[11,"id","","",12,[[],["u16"]]],[11,"size","","",12,[[],["u32"]]],[11,"write_to","","",12,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `FLOAT`s from a vector of `f32`.",13,[[["vec",["f32"]]],["tifftypevalues",["float"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `FLOAT`.",13,[[["f32"]],["tifftypevalues",["float"]]]],[11,"id","","",13,[[],["u16"]]],[11,"size","","",13,[[],["u32"]]],[11,"write_to","","",13,[[["self"],["endianfile"]],["result"]]],[11,"values","","Constructs a [`TiffTypeValues`] of `DOUBLE`s from a vector of `f64`.",14,[[["vec",["f64"]]],["tifftypevalues",["double"]]]],[11,"single","","Constructs a [`TiffTypeValues`] consisting of a single `DOUBLE`.",14,[[["f64"]],["tifftypevalues",["double"]]]],[11,"id","","",14,[[],["u16"]]],[11,"size","","",14,[[],["u32"]]],[11,"write_to","","",14,[[["self"],["endianfile"]],["result"]]],[11,"id","","",15,[[],["u16"]]],[11,"size","","",15,[[],["u32"]]],[11,"write_to","","",15,[[["self"],["endianfile"]],["result"]]],[0,"tag","tiff_encoder","Constants for commonly used tags in TIFF files, baseline  or extended.",N,N],[17,"NewSubfileType","tiff_encoder::tag","",N,N],[17,"SubfileType","","",N,N],[17,"ImageWidth","","",N,N],[17,"ImageLength","","",N,N],[17,"BitsPerSample","","",N,N],[17,"Compression","","",N,N],[17,"PhotometricInterpretation","","",N,N],[17,"Threshholding","","",N,N],[17,"CellWidth","","",N,N],[17,"CellLength","","",N,N],[17,"FillOrder","","",N,N],[17,"DocumentName","","",N,N],[17,"ImageDescription","","",N,N],[17,"Make","","",N,N],[17,"Model","","",N,N],[17,"StripOffsets","","",N,N],[17,"Orientation","","",N,N],[17,"SamplesPerPixel","","",N,N],[17,"RowsPerStrip","","",N,N],[17,"StripByteCounts","","",N,N],[17,"MinSampleValue","","",N,N],[17,"MaxSampleValue","","",N,N],[17,"XResolution","","",N,N],[17,"YResolution","","",N,N],[17,"PlanarConfiguration","","",N,N],[17,"PageName","","",N,N],[17,"XPosition","","",N,N],[17,"YPosition","","",N,N],[17,"FreeOffsets","","",N,N],[17,"FreeByteCounts","","",N,N],[17,"GrayResponseUnit","","",N,N],[17,"GrayResponseCurve","","",N,N],[17,"T4Options","","",N,N],[17,"T6Options","","",N,N],[17,"ResolutionUnit","","",N,N],[17,"PageNumber","","",N,N],[17,"TransferFunction","","",N,N],[17,"Software","","",N,N],[17,"DateTime","","",N,N],[17,"Artist","","",N,N],[17,"HostComputer","","",N,N],[17,"Predictor","","",N,N],[17,"WhitePoint","","",N,N],[17,"PrimaryChromaticities","","",N,N],[17,"ColorMap","","",N,N],[17,"HalftoneHints","","",N,N],[17,"TileWidth","","",N,N],[17,"TileLength","","",N,N],[17,"TileOffsets","","",N,N],[17,"TileByteCounts","","",N,N],[17,"BadFaxLines","","",N,N],[17,"CleanFaxData","","",N,N],[17,"ConsecutiveBadFaxLines","","",N,N],[17,"SubIFDs","","",N,N],[17,"InkSet","","",N,N],[17,"InkNames","","",N,N],[17,"NumberOfInks","","",N,N],[17,"DotRange","","",N,N],[17,"TargetPrinter","","",N,N],[17,"ExtraSamples","","",N,N],[17,"SampleFormat","","",N,N],[17,"SMinSampleValue","","",N,N],[17,"SMaxSampleValue","","",N,N],[17,"TransferRange","","",N,N],[17,"ClipPath","","",N,N],[17,"XClipPathUnits","","",N,N],[17,"YClipPathUnits","","",N,N],[17,"Indexed","","",N,N],[17,"JPEGTables","","",N,N],[17,"OPIProxy","","",N,N],[17,"GlobalParametersIFD","","",N,N],[17,"ProfileType","","",N,N],[17,"FaxProfile","","",N,N],[17,"CodingMethods","","",N,N],[17,"VersionYear","","",N,N],[17,"ModeNumber","","",N,N],[17,"Decode","","",N,N],[17,"DefaultImageColor","","",N,N],[17,"JPEGProc","","",N,N],[17,"JPEGInterchangeFormat","","",N,N],[17,"JPEGInterchangeFormatLength","","",N,N],[17,"JPEGRestartInterval","","",N,N],[17,"JPEGLosslessPredictors","","",N,N],[17,"JPEGPointTransforms","","",N,N],[17,"JPEGQTables","","",N,N],[17,"JPEGDCTables","","",N,N],[17,"JPEGACTables","","",N,N],[17,"YCbCrCoefficients","","",N,N],[17,"YCbCrSubSampling","","",N,N],[17,"YCbCrPositioning","","",N,N],[17,"ReferenceBlackWhite","","",N,N],[17,"StripRowCounts","","",N,N],[17,"XMP","","",N,N],[17,"ImageID","","",N,N],[17,"Copyright","","",N,N],[17,"ImageLayer","","",N,N],[6,"FieldTag","tiff_encoder","16-bit identifier of a field entry.",N,N],[8,"FieldValues","","The values contained or pointed at by an IFD Field.",N,N],[8,"Datablock","","A block of data in the file pointed to by a field value, but that isn't part of the field itself (such as image strips).",N,N],[10,"size","","The number of bytes occupied by this `Datablock`.",18,[[["self"]],["u32"]]],[10,"write_to","","Writes this `Datablock` to an [`EndianFile`]. The number of bytes  written must be exactly same number as returned by [`size(&self)`].",18,[[["self"],["endianfile"]],["result"]]],[11,"clone","","",3,[[["self"]],["endianness"]]],[11,"write_u8","","Writes a u8 to the file.",19,[[["self"],["u8"]],["result"]]],[11,"write_u16","","Writes a u16 to the file.",19,[[["self"],["u16"]],["result"]]],[11,"write_u32","","Writes a u32 to the file.",19,[[["self"],["u32"]],["result"]]],[11,"write_i8","","Writes a i8 to the file.",19,[[["self"],["i8"]],["result"]]],[11,"write_i16","","Writes a i16 to the file.",19,[[["self"],["i16"]],["result"]]],[11,"write_i32","","Writes a i32 to the file.",19,[[["self"],["i32"]],["result"]]],[11,"write_f32","","Writes a f32 to the file.",19,[[["self"],["f32"]],["result"]]],[11,"write_f64","","Writes a f64 to the file.",19,[[["self"],["f64"]],["result"]]],[11,"new","","Creates a new `TiffFile` from an [`IfdChain`].",20,[[["ifdchain"]],["tifffile"]]],[11,"with_endianness","","Returns the same `TiffFile`, but with the specified `Endianness`.",20,[[["self"],["endianness"]],["self"]]],[11,"write_to","","Writes the `TiffFile` content to a new file created at the given path.",20,[[["self"],["str"]],["result",["file"]]]],[11,"new","","Creates a new `IfdChain` from a vector of [`Ifd`]s.",21,[[["vec",["ifd"]]],["ifdchain"]]],[11,"single","","Creates a new `IfdChain` from a single [`Ifd`].",21,[[["ifd"]],["ifdchain"]]],[11,"new","","Creates a new empty `Ifd`.",22,[[],["ifd"]]],[11,"with_entry","","Returns the same `Ifd`, but adding the given pair of Tag and Values.",22,[[["self"],["fieldtag"],["t"]],["self"]]],[11,"with_subifds","","Returns the same `Ifd`, but adding the given subifds.",22,[[["self"],["vec",["ifdchain"]]],["self"]]],[11,"single","","Returns an [`IfdChain`] containing solely this `Ifd`.",22,[[["self"]],["ifdchain"]]],[11,"new","","Creates a new `OffsetsToIfds` instance from a vector of [`IfdChain`]s.",0,[[["vec",["ifdchain"]]],["self"]]],[11,"count","","",0,[[["self"]],["u32"]]],[11,"size","","",0,[[["self"]],["u32"]]],[11,"allocate","","",0,[[["box"],["cursor"]],["box",["allocatedfieldvalues"]]]],[11,"new","","Creates a new `Offsets` instance from a vector of [`Datablock`]s.",1,[[["vec"]],["self"]]],[11,"single","","Creates a new `Offsets` instance from a single [`Datablock`].",1,[[["t"]],["self"]]],[11,"count","","",1,[[["self"]],["u32"]]],[11,"size","","",1,[[["self"]],["u32"]]],[11,"allocate","","",1,[[["box"],["cursor"]],["box",["allocatedfieldvalues"]]]],[11,"offsets","","Constructs an [`Offsets`] of `ByteBlock`s from a vector of vectors of bytes.",2,[[["vec",["vec"]]],["offsets",["byteblock"]]]],[11,"single","","Constructs an [`Offsets`] from a vector of bytes.",2,[[["vec",["u8"]]],["offsets",["byteblock"]]]],[11,"size","","",2,[[["self"]],["u32"]]],[11,"write_to","","",2,[[["self"],["endianfile"]],["result"]]],[11,"new","","Creates a new instance of `TiffTypeValues` from a vector of instances of any given [`TiffType`].",23,[[["vec"]],["self"]]],[11,"count","","",23,[[["self"]],["u32"]]],[11,"size","","",23,[[["self"]],["u32"]]],[11,"allocate","","",23,[[["box"],["cursor"]],["box",["allocatedfieldvalues"]]]]],"paths":[[3,"OffsetsToIfds"],[3,"Offsets"],[3,"ByteBlock"],[4,"Endianness"],[3,"BYTE"],[3,"SHORT"],[3,"LONG"],[3,"RATIONAL"],[3,"SBYTE"],[3,"UNDEFINED"],[3,"SSHORT"],[3,"SLONG"],[3,"SRATIONAL"],[3,"FLOAT"],[3,"DOUBLE"],[3,"IFD"],[8,"TiffType"],[3,"ASCII"],[8,"Datablock"],[3,"EndianFile"],[3,"TiffFile"],[3,"IfdChain"],[3,"Ifd"],[3,"TiffTypeValues"]]};
initSearch(searchIndex);
